# Licensed to the Apache Software Foundation (ASF) under one
# or more contributor license agreements.  See the NOTICE file
# distributed with this work for additional information
# regarding copyright ownership.  The ASF licenses this file
# to you under the Apache License, Version 2.0 (the
# "License"); you may not use this file except in compliance
# with the License.  You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

"""
This file defines the default settings of the mesos-cli. It also takes care
of updating the default configuration from reading environment variables or
parsing a configuration file.
"""

import os
import toml

from cli.exceptions import CLIException


# There is no version module included in this package. However,
# when creating an executable using pyinstaller, a version.py
# file will be autogenerated and inserted into the PYTHONPATH.
# When this happens we import it to set the VERSION.
try:
    # pylint: disable=F0401,W0611
    from version import VERSION
except Exception:
    VERSION = "Development"

# The top-level directory of this project.
PROJECT_DIR = os.path.join(os.path.dirname(__file__), os.pardir)

# The builtin plugins.
PLUGINS = [
    os.path.join(PROJECT_DIR, "lib/mesos/plugins", "config")
]

MESOS_CLI_DEFAULT_CONFIG_PATH = os.path.join(
    os.path.expanduser("~"), ".mesos/config.toml")

# Load the configuration file path for the CLI.
if os.environ.get("MESOS_CLI_CONFIG"):
    MESOS_CLI_CONFIG_PATH = os.environ["MESOS_CLI_CONFIG"]
else:
    MESOS_CLI_CONFIG_PATH = MESOS_CLI_DEFAULT_CONFIG_PATH

# Load the configuration file as a TOML file.
try:
    CONFIG_DATA = toml.load(MESOS_CLI_CONFIG_PATH)
except Exception as exception:
    if MESOS_CLI_CONFIG_PATH is not MESOS_CLI_DEFAULT_CONFIG_PATH:
        raise CLIException("Error loading config file as TOML: {error}"
                           .format(error=exception))
    else:
        CONFIG_DATA = {}

# Allow extra plugins to be pulled in from the configuration file.
if "plugins" in CONFIG_DATA:
    if not isinstance(CONFIG_DATA["plugins"], list):
        raise CLIException("Unable to parse config file '{path}': 'plugins' "
                           "field must be a list"
                           .format(path=MESOS_CLI_CONFIG_PATH))

    for plugin in CONFIG_DATA["plugins"]:
        if os.path.exists(plugin):
            PLUGINS.append(plugin)
        else:
            raise CLIException("Plugin path not found: {path}"
                               .format(path=plugin))
